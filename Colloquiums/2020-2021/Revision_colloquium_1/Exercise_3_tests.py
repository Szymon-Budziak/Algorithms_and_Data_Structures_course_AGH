import random
import sys

sys.setrecursionlimit(1500)


def gen_test():
    random.seed(1)

    l = 1000
    q = 80
    station_exists_probability = 0.09
    max_station_fuelling_limit = 100
    R0 = random.Random(0)
    R1 = random.Random(0)

    def next_station_fuelling_limit() -> int:
        xx = R0.gauss(0.5, 0.2)
        aa = max(1, int(xx * max_station_fuelling_limit))
        print(f"Gauss: {xx}, Fuel: {aa}")
        return aa

    T = [0]
    V = [next_station_fuelling_limit()]

    for d in range(l):
        if R1.random() < station_exists_probability:
            T.append(d)
            V.append(next_station_fuelling_limit())

    x = (
        T,
        V,
        q,
        l,
        len([0, 10, 17, 29, 49, 62, 94, 123, 143, 151, 175, 215, 219, 233, 275, 293, 319, 341, 342, 388, 408, 425, 451,
             467, 470])
    )
    print("---------")
    print("----ala123----")
    print("---------")
    print("---------")
    print(x)
    print("---------")
    print("---------")
    print("---------")
    print("---------")
    return x


tests = [
    (
        [0, 1, 2],
        [2, 1, 5],
        1,
        4,
        None  # Minimal number of stops; None if no solution
    ),
    (
        [0, 5, 10],
        [10, 5, 20],
        100,
        35,
        3
    ),
    (
        [0, 1, 2],
        [2, 1, 5],
        2,
        4,
        2  # Minimal number of stops; None if no solution
    ),
    (
        [0, 10 ** 6 - 1, 10 ** 6],
        [10 ** 6, 1, 2],
        10 ** 6,
        10 ** 6 + 2,
        2  # Minimal number of stops; None if no solution
    ),
    (
        list(range(1000)),
        [1 for _ in range(1000)],
        1,
        1000,
        1000  # Minimal number of stops; None if no solution
    ),
    # (  # uniform fuel
    # [0, 2, 3, 5, 7, 8, 12, 15, 20, 24, 25, 26, 30, 32, 35, 37, 40, 41, 43, 44, 46, 48, 51, 52, 53, 56, 65, 67, 69, 70, 71, 74, 75, 83, 85, 92, 97, 99, 102,
    # 104, 105, 107, 109, 110, 112, 117, 121, 122, 124, 125, 127, 128, 129, 132, 133, 134, 135, 136, 138, 139, 141, 142, 144, 145, 149, 152, 155, 156, 158,
    # 159, 160, 161, 164, 165, 167, 169, 171, 172, 173, 174, 176, 177, 178, 183, 184, 186, 187, 188, 189, 191, 194, 195, 197, 199, 200, 201, 202, 204, 208,
    # 209, 210, 214, 217, 220, 222, 223, 225, 228, 229, 232, 234, 236, 237, 238, 239, 242, 245, 247, 248, 249, 255, 262, 264, 266, 267, 268, 271, 273, 274,
    # 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 291, 294, 295, 297, 298, 303, 306, 307, 309, 310, 311, 313, 314, 317, 318, 320, 322, 323,
    # 324, 328, 330, 331, 332, 333, 335, 336, 337, 338, 340, 343, 344, 347, 349, 350, 351, 353, 355, 356, 360, 361, 362, 368, 369, 371, 372, 373, 374, 376,
    # 377, 378, 391, 395, 397, 402, 403, 405, 406, 409, 410, 412, 414, 415, 417, 418, 419, 420, 424, 426, 428, 429, 430, 431, 432, 435, 437, 438, 440, 443,
    # 445, 446, 450, 459, 461, 463, 465, 466, 468, 473, 474, 479, 480, 481, 482, 486, 487, 490, 491, 493, 497, 498, 499, 500, 501, 502, 505, 507, 508, 511,
    # 512, 513, 514, 517, 518, 519, 521, 523, 524, 525, 529, 531, 533, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 550, 551, 553, 554, 555, 557, 558,
    # 559, 561, 562, 563, 564, 567, 571, 572, 574, 575, 576, 578, 579, 581, 582, 583, 586, 587, 591, 593, 596, 598, 600, 602, 603, 606, 607, 608, 609, 613,
    # 615, 616, 618, 620, 621, 622, 627, 629, 632, 633, 635, 637, 639, 641, 642, 643, 644, 646, 648, 649, 651, 653, 654, 656, 658, 663, 664, 670, 672, 673,
    # 674, 675, 676, 677, 679, 680, 683, 685, 687, 689, 690, 691, 694, 695, 696, 697, 698, 699, 701, 706, 708, 709, 717, 719, 720, 721, 722, 723, 725, 729,
    # 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 744, 745, 748, 750, 751, 753, 755, 756, 758, 761, 762, 763, 764, 766, 768, 769, 770, 773, 774, 775,
    # 776, 779, 780, 782, 784, 785, 786, 789, 790, 791, 793, 795, 796, 802, 804, 806, 810, 812, 815, 817, 818, 821, 823, 824, 825, 828, 834, 838, 842, 845,
    # 846, 847, 848, 851, 853, 854, 856, 861, 862, 863, 866, 867, 870, 872, 873, 876, 877, 879, 880, 881, 883, 884, 886, 888, 889, 890, 891, 892, 895, 896,
    # 897, 901, 902, 904, 905, 906, 907, 911, 912, 915, 916, 918, 921, 922, 926, 927, 929, 932, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 951,
    # 953, 955, 956, 957, 959, 963, 965, 967, 970, 972, 978, 981, 983, 987, 989, 993, 994, 995, 996, 999],
    # [35, 31, 17, 10, 21, 17, 32, 12, 20, 24, 38, 21, 11, 31, 25, 10, 38, 41, 34, 37, 13, 30, 37, 28, 19, 4, 18, 25, 38, 40, 20, 36, 10, 33, 23, 0, 30, 16,
    # 34, 28, 0, 20, 36, 10, 13, 36, 8, 23, 10, 40, 33, 18, 3, 13, 21, 39, 4, 23, 29, 22, 34, 22, 40, 25, 24, 18, 25, 16, 24, 12, 7, 7, 25, 27, 20, 3, 31,
    # 36, 38, 35, 37, 38, 22, 16, 29, 11, 34, 35, 37, 24, 39, 24, 18, 27, 41, 38, 33, 3, 25, 20, 26, 35, 10, 30, 4, 9, 33, 13, 34, 4, 6, 29, 1, 24, 38, 22,
    # 28, 1, 26, 25, 24, 16, 15, 41, 1, 0, 40, 7, 5, 8, 33, 39, 0, 17, 4, 10, 9, 27, 14, 7, 21, 1, 4, 41, 8, 15, 30, 35, 38, 7, 28, 40, 2, 28, 35, 14, 10,
    # 25, 18, 7, 19, 17, 23, 21, 13, 15, 35, 10, 23, 0, 31, 14, 1, 11, 10, 40, 14, 12, 15, 39, 26, 26, 30, 16, 17, 27, 0, 8, 14, 10, 26, 15, 36, 23, 17, 16,
    # 29, 17, 27, 1, 18, 10, 6, 22, 20, 23, 31, 37, 20, 13, 19, 33, 36, 34, 7, 41, 26, 3, 30, 41, 16, 28, 13, 8, 30, 0, 34, 22, 4, 4, 27, 36, 11, 41, 4, 35,
    # 16, 3, 11, 19, 33, 36, 5, 21, 27, 14, 36, 11, 0, 1, 28, 23, 39, 39, 38, 1, 31, 29, 27, 29, 37, 26, 15, 22, 8, 24, 0, 6, 14, 33, 30, 14, 26, 1, 6, 41,
    # 12, 16, 23, 12, 20, 10, 2, 7, 21, 2, 16, 13, 17, 4, 38, 19, 35, 41, 14, 20, 29, 17, 12, 30, 37, 38, 26, 15, 40, 26, 2, 3, 31, 2, 0, 16, 21, 18, 20, 24,
    # 28, 17, 15, 41, 10, 32, 18, 15, 2, 36, 29, 37, 18, 28, 4, 16, 8, 1, 39, 9, 6, 8, 15, 22, 6, 41, 41, 6, 17, 28, 36, 20, 38, 13, 20, 20, 28, 8, 25, 9,
    # 14, 40, 37, 34, 1, 6, 10, 32, 35, 24, 30, 33, 2, 3, 36, 1, 9, 1, 0, 35, 13, 6, 6, 27, 40, 21, 37, 21, 24, 28, 33, 31, 41, 31, 38, 8, 22, 25, 34, 20,
    # 33, 16, 24, 35, 33, 27, 0, 7, 21, 10, 2, 36, 39, 12, 17, 34, 2, 26, 5, 12, 34, 2, 1, 17, 20, 36, 30, 28, 6, 41, 17, 25, 16, 1, 19, 6, 1, 25, 26, 4, 23,
    # 14, 16, 32, 20, 37, 25, 19, 26, 14, 5, 28, 26, 33, 5, 38, 33, 38, 36, 28, 34, 21, 32, 7, 32, 18, 31, 19, 33, 3, 1, 39, 20, 37, 39, 27, 24, 9, 3, 34,
    # 37, 32, 29, 17, 12, 4, 17, 23, 38, 39, 17, 4, 32, 30, 1, 18, 28, 1, 38, 40, 30, 3, 2, 15, 1, 14, 0, 40, 34, 2, 37, 8, 8],
    # 100,
    # 1000,
    # 25
    # ),
    (  # uniform fuel
        [
            0, 35, 40, 112, 117, 124, 125, 132, 141, 169, 172, 186, 199, 225, 248, 249, 255, 266, 273, 282, 310, 333,
            360, 371, 373, 374, 402, 418, 429, 432,
            466,
            490,
            493, 500, 502, 512, 514, 542, 544, 583, 586, 602, 613, 653, 656, 663, 664, 694, 721, 723, 739, 740, 753,
            758, 773, 823, 847, 863, 877, 879, 880,
            902,
            906,
            916, 932, 934, 957, 959, 983, 993, 995
        ],
        [
            84, 75, 42, 25, 51, 40, 78, 30, 47, 58, 90, 50, 28, 75, 61, 25, 90, 98, 81, 90, 31, 72, 89, 68, 47, 10, 43,
            61, 91, 96, 47, 86, 26, 80, 54, 1, 71,
            39,
            82,
            66, 0, 49, 86, 24, 32, 87, 19, 56, 23, 96, 80, 44, 8, 32, 50, 93, 10, 55, 70, 54, 81, 54, 96, 60, 58, 44,
            59, 38, 57, 29, 18],
        80,
        1000,
        17),
    (  # gaussian mu=05, sigma=0.2 fuel
        [0, 35, 40, 52, 75, 97, 112, 117, 124, 125, 132, 141, 152, 169, 172, 186, 199, 217, 225, 237, 248, 249, 255,
         266, 273, 282, 285, 306, 307, 309, 310,
         324,
         333, 360, 368, 369, 371, 373, 374, 402, 406, 412, 417, 418, 429, 432, 465, 466, 490, 493, 497, 498, 500, 502,
         505, 512, 514, 542, 544, 545, 546, 553,
         557,
         583, 586, 602, 613, 648, 651, 653, 656, 658, 663, 664, 694, 697, 699, 721, 723, 739, 740, 753, 755, 758, 763,
         769, 773, 823, 828, 847, 862, 863, 877,
         879,
         880, 883, 884, 902, 906, 916, 922, 932, 934, 935, 957, 959, 983, 993, 995],
        [68, 22, 36, 57, 29, 48, 53, 33, 23, 53, 69, 37, 43, 82, 38, 39, 98, 19, 65, 9, 38, 80, 74, 31, 40, 51, 24, 61,
         94, 22, 10, 55, 47, 86, 46, 48, 46, 30,
         63,
         23, 73, 50, 60, 38, 31, 86, 59, 74, 53, 102, 57, 29, 65, 58, 3, 47, 69, 66, 43, 25, 59, 27, 76, 43, 31, 38, 33,
         38, 35, 42, 54, 61, 27, 30, 41, 51, 51,
         9,
         84, 32, 86, 22, 30, 44, 45, 34, 64, 13, 71, 33, 75, 41, 22, 58, 94, 48, 52, 42, 32, 34, 23, 21, 51, 82, 60, 59,
         54, 32, 53],
        80,
        1000,
        17),
    # gen_test()
]


def runtests(f):
    problems_count = 0
    for X in tests:
        T, V, q, l, stops = X
        if len(T) < 20:
            print("len(T) =", len(T))
            print('T = ', T)
            print('V = ', V)
            print('q = ', q)
            print('l = ', l)
        else:
            print("Dane za duÅ¼e do wypisania w calosci. Wypisywane sa prefiksy.")
            print("len(T) =", len(T))
            print('T[:10] = ', T[:10], "...")
            print('V[:10] = ', V[:10], "...")
            print('q = ', q)
            print('l = ', l)

        path = f(T.copy(), V.copy(), q, l)

        if len(path) < 10:
            print('Result = ', path)
        else:
            print("Result[:10] = ", path[:10], "...")
        print('Number of stops =', len(path) if len(path) > 0 else 'no path found')
        if stops is None:
            print('Expected number of stops = this test case has no valid path to the target city')
        else:
            print('Expected number of stops =', stops)

        valid = True
        if stops is None:
            if len(path) > 0:
                valid = False
        elif stops != None and len(path) == 0:
            valid = False
        else:
            fuel = 0
            for i in range(len(path)):
                if i > 0:
                    fuel -= (T[path[i]] - T[path[i - 1]])
                    if fuel < 0:
                        print(f'Not enough fuel to reach next stop! From {T[path[i - 1]]} to {T[path[i]]}')
                        valid = False
                        break
                fuel = min(q, fuel + V[path[i]])
            if valid:
                fuel -= (l - T[path[-1]])
                if fuel < 0:
                    print(f'Not enough fuel to reach next stop! From {T[path[- 1]]} to {l}')
                    valid = False

            if stops < len(path):
                valid = False
                print(f"Expected number of stops: {stops}, actual: {len(path)}!")
        if not valid:
            print('Invalid solution!!')
            problems_count += 1
        else:
            print('OK')
        print()

    print("----------------------------------")
    print("----------------------------------")
    if problems_count == 0:
        print('Passed all tests')
    else:
        print(f'Failed {problems_count} times!!')
