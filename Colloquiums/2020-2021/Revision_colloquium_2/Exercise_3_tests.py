# Exercise_3_tests.py
from Tests import *

# format test√≥w
# TESTS = [ {"arg":arg0, "hint": hint0}, {"arg":arg1, "hint": hint1}, ... ]


TESTS = [
    # 0
    {
        "arg": [[[(1, 2), (2, 4)],
                 [(0, 2), (3, 11), (4, 3)],
                 [(0, 4), (3, 13)],
                 [(1, 11), (2, 13), (5, 17), (6, 1)],
                 [(1, 3), (5, 5)],
                 [(3, 17), (4, 5), (7, 7)],
                 [(3, 1), (7, 3)],
                 [(5, 7), (6, 3), ]], 0, 7],
        "hint": 7
    },
    # 1
    {
        "arg": [[[(1, 2), (2, 4)],
                 [(0, 2), (3, 11), (4, 3)],
                 [(0, 4), (3, 13)],
                 [(1, 11), (2, 13), (5, 17), (6, 1)],
                 [(1, 3), (5, 5)],
                 [(3, 17), (4, 5), (7, 7)],
                 [(3, 1), (7, 3)],
                 [(5, 7), (6, 3), ]], 4, 6],
        "hint": 6
    },
    # 2
    {
        "arg": [[[(1, 2), (2, 4)],
                 [(0, 2), (3, 11), (4, 3)],
                 [(0, 4), (3, 13)],
                 [(1, 11), (2, 13), (5, 17), (6, 1)],
                 [(1, 3), (5, 5)],
                 [(3, 17), (4, 5), (7, 7)],
                 [(3, 1), (7, 3)],
                 [(5, 7), (6, 3), ]], 2, 5],
        "hint": 4
    },
    # 3
    {
        "arg": [[[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)],
                 [(0, 1), (10, 9)],
                 [(0, 2), (10, 8)],
                 [(0, 3), (10, 7)],
                 [(0, 4), (10, 6)],
                 [(0, 5), (10, 5)],
                 [(0, 6), (10, 4)],
                 [(0, 7), (10, 3)],
                 [(0, 8), (10, 2)],
                 [(0, 9), (10, 1)],
                 [(1, 9), (2, 8), (3, 7), (4, 6), (5, 5), (6, 4), (7, 3), (8, 2), (9, 1)]], 0, 10],
        "hint": 18
    },
    # 4
    {
        "arg": [[[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)],
                 [(0, 1), (10, 9)],
                 [(0, 2), (10, 8)],
                 [(0, 3), (10, 7)],
                 [(0, 4), (10, 6)],
                 [(0, 5), (10, 5)],
                 [(0, 6), (10, 4)],
                 [(0, 7), (10, 3)],
                 [(0, 8), (10, 2)],
                 [(0, 9), (10, 1)],
                 [(1, 9), (2, 8), (3, 7), (4, 6), (5, 5), (6, 4), (7, 3), (8, 2), (9, 1)]], 1, 9],
        "hint": 4
    },
    # 5
    {
        "arg": [[[(5, 8), (6, 1), (20, 1), (21, 9), (24, 8)],
                 [(2, 2), (5, 4), (14, 1), (25, 5)],
                 [(1, 2), (11, 1), (18, 4), (21, 3), (26, 9)],
                 [(6, 4), (7, 1), (8, 6), (9, 6), (12, 8), (14, 6), (17, 8), (18, 6), (19, 2), (23, 3), (24, 5)],
                 [(6, 4), (10, 4), (25, 4), (25, 7), (29, 5)],
                 [(0, 8), (1, 4), (7, 6), (14, 7), (18, 7), (22, 8), (26, 3), (27, 1), (28, 1)],
                 [(0, 1), (3, 4), (4, 4), (16, 7), (19, 6)],
                 [(3, 1), (5, 6), (10, 7), (20, 2), (29, 8)],
                 [(3, 6), (27, 3)],
                 [(3, 6), (14, 1), (15, 7), (16, 8), (20, 1), (21, 9), (22, 5), (23, 4), (26, 4), (28, 7)],
                 [(4, 4), (7, 7), (13, 4), (16, 7), (19, 6)],
                 [(2, 1), (13, 9), (19, 5), (21, 1), (28, 8)],
                 [(3, 8), (14, 6), (16, 8)],
                 [(10, 4), (11, 9), (15, 5), (18, 2), (29, 2)],
                 [(1, 1), (3, 6), (5, 7), (9, 1), (12, 6), (17, 6), (22, 1)],
                 [(9, 7), (13, 5), (23, 4), (27, 1)],
                 [(6, 7), (9, 8), (10, 7), (12, 8), (18, 6), (27, 9)],
                 [(3, 8), (14, 6), (23, 2)],
                 [(2, 4), (3, 6), (5, 7), (13, 2), (16, 6), (23, 5), (24, 6)],
                 [(3, 2), (6, 6), (10, 6), (11, 5), (27, 8)],
                 [(0, 1), (7, 2), (9, 1), (21, 6), (23, 4), (25, 3), (28, 4), (29, 8)],
                 [(0, 9), (2, 3), (9, 9), (11, 1), (20, 6), (24, 8), (27, 7), (28, 1)],
                 [(5, 8), (9, 5), (14, 1), (24, 1), (27, 8)],
                 [(3, 3), (9, 4), (15, 4), (17, 2), (18, 5), (20, 4), (24, 8)],
                 [(0, 8), (3, 5), (18, 6), (21, 8), (22, 1), (23, 8), (28, 3), (29, 9)],
                 [(1, 5), (4, 4), (20, 3), (26, 4)],
                 [(2, 9), (5, 3), (9, 4), (25, 4)],
                 [(5, 1), (8, 3), (15, 1), (16, 9), (19, 8), (21, 7), (22, 8), (29, 3)],
                 [(5, 1), (9, 7), (11, 8), (20, 4), (21, 1), (24, 3)],
                 [(4, 5), (7, 8), (13, 2), (20, 8), (24, 9), (27, 3)]], 0, 18],
        "hint": 11
    },
    # 6
    {
        "arg": [[[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)],
                 [(0, 1), (10, 9)],
                 [(0, 2), (10, 8)],
                 [(0, 3), (10, 7)],
                 [(0, 4), (10, 6)],
                 [(0, 5), (10, 5)],
                 [(0, 6), (10, 4)],
                 [(0, 7), (10, 3)],
                 [(0, 8), (10, 2)],
                 [(0, 9), (10, 1)],
                 [(1, 9), (2, 8), (3, 7), (4, 6), (5, 5), (6, 4), (7, 3), (8, 2), (9, 1)],
                 [(12, 3)],
                 [(11, 3)]], 0, 11],
        "hint": 0
    },

]


def printarg(G, s, k):
    print("Graf: ", limit(G, 120))
    print("Start: ", s)
    print("Cel  : ", k)


def printhint(hint):
    print("Przykladowy wynik:", limit(hint, 120))


def printsol(sol):
    print("Uzyskany wynik   :", limit(sol, 120))


def check(G, s, k, hint, sol):
    if hint == sol:
        print("Test zaliczony")
        return True
    else:
        print("NIEZALICZONY!")
        return False


def runtests(f):
    internal_runtests(printarg, printhint, printsol, check, TESTS, f)
